"""
Django settings for utopia project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
from os import getenv
SECRET_KEY = getenv('DJANGO_SECRET_KEY', 'n0t-s0-s3cret-def4ault')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'map.apps.MapConfig',
    'leaflet',
    'fontawesome_5',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'utopia.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'utopia.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = 'static/'

# Base url to serve media files
MEDIA_URL = '/media/'

# Path where media is stored
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

LEAFLET_CONFIG = {
    'DEFAULT_CENTER': (51, 9.5),
    'DEFAULT_ZOOM': 9,
    'MIN_ZOOM': 3,
    'MAX_ZOOM': 18,
    'RESET_VIEW': False,
    'TILES': 'https://tile.osmand.net/hd/{z}/{x}/{y}.png',
    'DEFAULT_PRECISION': 6,
    'ATTRIBUTION_PREFIX': '',
    'PLUGINS': {
        'ExtraMarkers': {
            'css': 'map/vendors/leaflet-extra-markers/css/leaflet.extra-markers.min.css',
            'js': 'map/vendors/leaflet-extra-markers/js/leaflet.extra-markers.js',
            'auto-include': True,
        },
        'Control.Locate': {
            'css': 'map/vendors/leaflet-control-locate/css/L.Control.Locate.css',
            'js': 'map/vendors/leaflet-control-locate/js/L.Control.Locate.js',
            'auto-include': True,
        },
        'Photon': {
            'css': 'map/vendors/leaflet-photon/css/leaflet.photon.css',
            'js': 'map/vendors/leaflet-photon/js/leaflet.photon.js',
            'auto-include': True,
        },
        'MarkerCluster': {
            'css': 'map/vendors/leaflet-markercluster/css/MarkerCluster.css',
            'css': 'map/vendors/leaflet-markercluster/css/MarkerCluster.Default.css',
            'js': 'map/vendors/leaflet-markercluster/js/leaflet.markercluster-src.js',
            'auto-include': True,
        },
        'MarkerCluster-Subgroup': {
            'js': 'map/vendors/leaflet-markercluster/js/leaflet.markercluster.layersupport.js',
            'auto-include': True,
        },
    },

}

import os

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}
